pipeline {
    agent any 
  tools {
      
         jdk 'JDK_17'
        maven 'MVN_3' // The name configured in Global Tool Configuration
    }
      environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "http://18.61.5.17:8081"
        NEXUS_REPOSITORY = "maven-releases"
        NEXUS_CREDENTIAL_ID = "NEXUS"
        IMAGE_TAG = "v${BUILD_NUMBER}"
     }
 
  stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/FullStack-Blogging-App.git'
                   
            }
        }
        stage('code compile') {
            steps {
                sh "mvn compile"
            }
        }
       
          stage('testing') {
            steps {
                sh "mvn test"
            }
        }
       
      stage('Trivy scan') {
            steps {
               sh "trivy fs . --format table -o fs-report.html "
               archiveArtifacts artifacts: 'fs-report.html', fingerprint: true
            }
        }
        stage('SonarQube Code Analysis') {
            steps {
                // Run SonarQube analysis for Python
                script {
                    def scannerHome = tool name: 'MY_SONAR', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv('MYSONAR') {
                         sh 'mvn test sonar:sonar'
                    }
                }
            }  
        }
          
       stage('Build') {
            steps {
                sh "mvn package"
            }
        }
    

       stage('Upload Artifact'){
          steps{
              nexusArtifactUploader(
              nexusVersion: 'nexus3',
              protocol: 'http',
             nexusUrl: '18.61.5.17:8081',
              groupId: 'Devopa',
             version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
             repository: 'maven-releases',
             credentialsId: 'Nexus',
             artifacts: [
               [artifactId: 'MAVENFILE',
               classifier: '',
               file: 'target/twitter-app-0.0.3.jar',
                type: 'jar']
               ]
             )
         }
     } 
      stage('DockerImage') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'Docker-id',url: 'https://index.docker.io/v1/']){
                    sh "docker build -t krishnakanthgoud/ekart:${IMAGE_TAG} ."
                    sh "docker push krishnakanthgoud/ekart:${IMAGE_TAG}"
                    }
                }
            }
        }
    } 
      post {
    always {
        emailext (
            subject: "Pipeline status: ${BUILD_NUMBER}",
            body: """<html>
                        <body>
                            <p>Build Status: ${currentBuild.result ?: 'SUCCESS'}</p>
                            <p>Build Number: ${BUILD_NUMBER}</p>
                            <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                        </body>
                    </html>""",
            to: 'dockerhouse5@gmail.com',
            from: 'krishnakanthg59@gmail.com',
            replyTo: 'forexample@gmail.com',
            mimeType: 'text/html'
        )
    }
  } 
} 
